// Time Complexity : O(m+n), m -> number of rows, n -> number of columns
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes

// Start from th top right corner of the matrix and comapre value with the target
// if the element is smaller than the target move to the next row (r++) otherwise move to the left (c--)
// if target is found return true else return false once r or c becomes out of bounds

// Your code here along with comments explaining your approach

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        int r = 0;
        int c = n-1;
        while(r < m && c >= 0) {
            // target found
            if(matrix[r][c] == target)
                return true;
            // if element is smaller than target move to next row
            else if(matrix[r][c] < target) {
                r++;
            }
            // if element is greater than target move to previous column
            else {
                c--;
            }
        }
        return false;
    }
}